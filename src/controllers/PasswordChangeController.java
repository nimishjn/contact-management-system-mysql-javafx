package controllers;

import app.Alerts;
import app.ChangeView;
import app.Database;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;

import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.ResourceBundle;

public class PasswordChangeController implements Initializable {


    @FXML
    private Button okBtn;
    @FXML
    private PasswordField oldPass, newPass;


    @Override
    public void initialize(URL location, ResourceBundle resources) {
        System.out.println("This is PasswordChangeController");
    }

    // check with database and change password
    public void changePassword() throws SQLException {
        Alerts a;

        if (!(oldPass.getText().equals("")) && !(newPass.getText().equals(""))) {

            if (oldPass.getText().equals(newPass.getText())) {
                System.out.println("No change detected between passwords");
                a = new Alerts();
                a.auxAlert(Alert.AlertType.ERROR, "Password Changer", "No change detected between passwords");
                return;
            }

            String oldPassword = oldPass.getText();     // user entered oldPass
            String newPassword = newPass.getText();     // user entered new Pass

            Database db = new Database();
            Connection conn = db.getConnection();

            String query = "SELECT password FROM users";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);

            /*
             * we read only the first row of the resultant table generated by the 'rs', as the app is made in such a way
             * that MAX no:of users = 1,
             * the login and sign up functionality is just made for fun
             */

            boolean queryOnlyFirstRow = false;  //  A limiter to get only the first row of the ResultSet

            /*
             * we assume user has not modified the SQL database by running any modification queries through the MySQL
             * Workbench or MySQL CLC
             */

            String RealOldPassword = "";    // Variable to hold the current password [before change] in the database

            try {

                while (!queryOnlyFirstRow) {

                    if (rs.next()) {
                        queryOnlyFirstRow = true; // this makes program read only the first row, i.e. oldest existing user [if user have edited database manually]
                        RealOldPassword = rs.getString(1);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            String q;  // made to hold a SQL query in below section


            if (oldPassword.equals(RealOldPassword)) {  /*
                                                         * [ if the user entered old password in 'oldPass' TextField
                                                         * matches the current password in the database ]
                                                         */
                System.out.println("Password matches [pass in database and pass entered in runtime]");
                q = "UPDATE users SET password = ? WHERE password = ?";
                PreparedStatement ps = conn.prepareStatement(q);
                ps.setString(1, newPassword);
                ps.setString(2, oldPassword);

                int rowsAffectedHere = ps.executeUpdate();  // execute query, i.e. change database through application

                ps.close();

                if (rowsAffectedHere == 1) {    // if query ran successfully as we intended

                    a = new Alerts();
                    a.auxAlert(
                            Alert.AlertType.INFORMATION,
                            "Password Changer",
                            "Password is successfully changed"
                    );

                    System.out.println("Password is changed");
                    goBack();
                }
            } else {
                System.out.println("Entered old password did not match the existing Password");
                Alerts.auxAlertStatic(
                        Alert.AlertType.ERROR,
                        "Password Changer",
                        "Entered old password did not match the existing Password"
                );

            }

            st.close();
            rs.close();
            conn.close();
            clearFields();

        } else {
            System.out.println("Nothing entered in one or both TextFields");
            Alerts.auxAlertStatic(
                    Alert.AlertType.ERROR,
                    "Password Changer",
                    "Nothing entered in one or both TextFields"
            );

        }
    }

    public void clearFields() {
        oldPass.clear();
        newPass.clear();
    }

    // move back to 'Contacts' view when 'backBtn' is clicked
    public void goBack() {
        try {
            ChangeView cv = new ChangeView(okBtn);
            cv.changeView("Contacts");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
